{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\nimport ElementUI from \"element-ui\";\nvar request = axios.create({\n  baseURL: 'http://localhost:9090',\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  var user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\n\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(function (response) {\n  var res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } //当权限验证不通过的时候给出提示\n\n\n  if (res.code === '401') {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n    router.replace('/login');\n  }\n\n  return res;\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["D:/system/vue-master/src/utils/request.js"],"names":["axios","router","ElementUI","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","Message","message","msg","type","replace","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,uBADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;AAEA,MAAIC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAA/B,GAA0E,IAArF;;AAEA,MAAIF,IAAJ,EAAU;AACNF,IAAAA,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BC,IAAI,CAACK,KAA/B,CADM,CACiC;AAC1C;;AAGD,SAAOP,MAAP;AACH,CAXD,EAWG,UAAAQ,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAbD,E,CAeA;AACA;;AACAd,OAAO,CAACI,YAAR,CAAqBa,QAArB,CAA8BZ,GAA9B,CACI,UAAAY,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACX,MAAT,CAAgBc,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;AACpBtB,IAAAA,SAAS,CAACuB,OAAV,CAAkB;AACdC,MAAAA,OAAO,EAAEL,GAAG,CAACM,GADC;AAEdC,MAAAA,IAAI,EAAE;AAFQ,KAAlB;AAIA3B,IAAAA,MAAM,CAAC4B,OAAP,CAAe,QAAf;AACH;;AACD,SAAOR,GAAP;AACH,CApBL,EAqBI,UAAAJ,KAAK,EAAI;AACLa,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQd,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAxBL;AA2BA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\nimport ElementUI from \"element-ui\";\nconst request = axios.create({\n    baseURL: 'http://localhost:9090',\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\n\n    if (user) {\n        config.headers['token'] = user.token;  // 设置请求头\n    }\n\n\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        //当权限验证不通过的时候给出提示\n        if (res.code === '401') {\n            ElementUI.Message({\n                message: res.msg,\n                type: 'error'\n            });\n            router.replace('/login')\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\nexport default request\n\n"]},"metadata":{},"sourceType":"module"}